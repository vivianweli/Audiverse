<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Audio List</title>
  <style>
    body { font-family: Arial, sans-serif; }
    .filter { margin: 20px 0; }
    .filter select { padding: 5px; }
    .audio-item { margin: 10px 0; padding: 10px; border: 1px solid #ddd; }
    .tags { color: gray; font-size: 0.9em; }
    a { text-decoration: none; color: blue; }
  </style>
</head>
<body>
  <h1>
    <label>Audio List</label>
  </h1>
  

  <!-- Tag Filter -->
  <div class="filter">
    <label for="tag-filter">Filter by tag:</label>
    <select id="tag-filter">
      <option value="all">All</option>
    </select>
  </div>

  <!-- Audio List -->
  <div id="audio-list"></div>

  <script>
    let audioData = [];
    let allTags = [];

    // Load data from JSON
    fetch('sounds.json')
      .then(response => response.json())
      .then(data => {
        audioData = data.sounds;
        allTags = data.tags;

        populateTagFilter();
        displayAudios(audioData);
      })
      .catch(err => console.error('Error:', err));

    // Display audios in the list
    function displayAudios(audios) {
      const audioList = document.getElementById('audio-list');
      audioList.innerHTML = ''; // Clear the list

      if (audios.length === 0) {
        audioList.innerHTML = '<p>No audio available for this tag.</p>';
        return;
      }

      audios.forEach(audio => {
        const div = document.createElement('div');
        div.className = 'audio-item';
        let tagMessage;
        if (audio.tags=== 'undefined') {
          tagMessage = 'No tags';
        } else if (allTags.includes(audio.tags)) {
          tagMessage = `Tag: ${audio.tags}`;
        } else {
          tagMessage = `Tags: ${audio.tags.split(',').join(', ')}`;
        }

        div.innerHTML = `
          <h2><a href="details.html?id=${audio.id}">${audio.title}</a></h2>
          <p class="tags">Tags: ${tagMessage}</p>
          <p>Uploader: ${audio.uploader} | Likes: ${audio.likes} | Duration: ${audio.duration}</p>
        `;
        audioList.appendChild(div);
      });
    }

    // Populate the tag filter dropdown
    function populateTagFilter() {
      const tagFilter = document.getElementById('tag-filter');
      allTags.forEach(tag => {
        const option = document.createElement('option');
        option.value = tag;
        option.textContent = tag;
        tagFilter.appendChild(option);
      });

      tagFilter.addEventListener('change', filterByTag);
    }

    // Filter audios by selected tag
    function filterByTag() {
      const selectedTag = document.getElementById('tag-filter').value;

      if (selectedTag === 'all') {
        displayAudios(audioData);
      } else {
        const filteredAudios = audioData.filter(audio => audio.tags.includes(selectedTag));
        displayAudios(filteredAudios);
      }
    }
  </script>
</body>
</html>
